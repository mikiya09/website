

--- 
/* 
import logo images in a variable logo, and in the <img> tags, we use scr={logo} 
this is called dynamic readering, because we are rendering the images in runtime, I guess 
*/
import logo from '../assets/images/ladybug3.svg';
--- 

<div class="header">
    <div class="headerL">
        <a href="/">
            <img src={logo} width=45 alt="" />
        </a>
    </div>
    <div class="headerC">
        <div id="menu" data-visible='false' class="menu">
            <div><a href="/" class="active">HOME</a></div>
            <div><a href="/research">RESEARCH</a></div>
            <div><a href="/blog">BLOG</a></div>
        </div>
        <button aria-controls="menu" class="hamburger sr-only">
            <span></span>
            <span></span>
            <span></span>
        </button>
    </div>
    <div class="headerR">
        <div id="mobile-nav" data-visible="false" class="mobile-nav">
            <div><a href="/">HOME</a></div>
            <div><a href="/research">RESEARCH</a></div>
            <div><a href="/blog">BLOG</a></div>
        </div>
    </div>
</div>


<!-- --- style --- -->
<style>

/* -------- grid display for the .header class, outter container -------- */
.headerL {
    grid-area: headerL;
    display: flex;
    justify-content: center;
    align-items: center;
}

.headerC {
    grid-area: headerC;
    display: flex;
    align-items: center;
    justify-content: right;
}

.headerR {
    grid-area: headerR;
}

.header {
    background: var(--color-bg);
    padding: 1.5rem 0;
    border-top-right-radius: 2rem;
    border-top-left-radius: 2rem;
    display: grid;
    grid-template-columns: 15% 70% 15%;
    grid-template-rows: auto;
    grid-template-areas:
        "headerL headerC headerR"
}

/* --- large monitor such as 24 inches --- */
@media (max-width: 1700px) {
    .header {
        grid-template-columns: 15% 70% 15%;
    }
}
/* -------- grid display for the .header class, outter container -------- */


/* --- headerC/L/R (also refer to above) --- */
.headerC a {
    color: var(--color-white);
    font-size: 21px;
    margin: 0 0 0 2rem;
    font-family: "slkscr";
    /* font-family: "Montserrat Alternates"; */
}

.headerC a:hover {
    color: var(--color-grey);
}


/* --- Logo: it is in the .headerL class --- */
.headerL img {
    transition: 350ms ease-out;
}

.headerL img:hover {
    transform: translate(0px, -2px) rotate(45deg);
}




/*
-------- menu and navbar -------
layer concepts: 
1) in web page development, you can think of the distributing components onto the a blank paper 
2) you can put components on top of the other components, to reach a some speicial effect like toggle navbar in mobile device 
3) so here we have a propertie called z-index: just understand it as the value in z-axis in a coordinate system 
4) for toggle navbar to work, toggle button should always be on the top. So nothing is gonna prevent users from clicking
*/

/* --- for window size larger than 1024px: we show the normal menu and hide the hamburger menu, as well as the mobile-nav --- */
.menu {
    display: flex;
}

.hamburger {
    display: none;
}

.mobile-nav {
    display: none;
}

/* --- for window size less than 1024px: we hide the normal menu and show the hamburger button --- */
@media (max-width: 1100px) {


    /* --- setup the toggle menu --- */
    .menu {
        display: none;
    }

    .mobile-nav div {
        padding: 2rem 3rem 2rem;
        border-bottom: solid;
    }

    .mobile-nav a {
        font-family: "slkscr";
        color: var(--color-white);
    }

    /* 
    inset: 0 0 0 100%
    1) the short hand for setting the how much a div will take off the space in the page 
        - top: 0 
        - right: 0 
        - bottom: 0 
        - left: 100%
    2) for exmaple, if setting top: 0, meaning there no empty space on the top of this contaier
    3) just like margin/padding properties
    */
    .mobile-nav {
        inset: 0 0 0 100%;
        width: 100%;
        padding: 15rem 0 0;             /* adding space between navbar menu and the top, so they won't overlap with hamburger */
        display: flex;
        flex-direction: column;
        position: fixed;
        background: var(--color-black);
        z-index: 98;                        /* adding z-index to 98 just below the hamburger button  */
        transition: transform 350ms ease-out;
    }

    /* 
    translateX(): 
    1) css animation slide the block on its x-axis 
    2) positive value means moving to the right, while negative move to the left 
    3) usually we add transition: property for the letting the animation goes smoothly, add to the div that were animated
    4) here we achieve it by using the customed property "data-visible", usually this is used for show or hide thing
    */
    .mobile-nav[data-visible="true"] {
        transform: translateX(-40%);
    }


    /* 
    blur effect:
    1) not all browser support blurring effect, such as firefox 
    2) by adding an if statement in css so that it will fall back to certain style for the browsers not supporting 
    3) if supports, run code in the curly brackets; otherwise fall back to original
    4) no necessary actually, because if the browser doesn't support it will omit blur by default
    */
    @supports (backdrop-filter: blur(1rem)) {
        .mobile-nav {
            background: hsl(0 0% 100% / 0.1);
            backdrop-filter: blur(1rem);
        }
    }

    /* --- setup the hamburger button --- */
    .hamburger {
        z-index: 99;            /* setting the z-index on top of the mobile-nav, set to 9999 for absolutely top if you want */
        display: block;
        position: relative;
        user-select: none;
        
        appearance: none;       /* --- from here to below is the setting for no display anything in the span background  --- */
        border: none;           /* --- */
        outline: none;          /* --- */
        background: none;       /* --- */
        cursor: pointer;        /* --- to here ---  */
    }

    .hamburger span {
        display: block;
        width: 2rem;
        height: 0.5px;
        position: relative;
        margin: 5px 0 0;
        border: solid var(--color-white) 1px;
        border-radius: 10px;
        background: var(--color-white);
        transition: 350ms;
    }

    /* is-active toggle animation */
    .hamburger.is-active span:nth-child(1) {
        transform: translate(0px, 9px) rotate(45deg);
    }

    .hamburger.is-active span:nth-child(2) {
        opacity: 0;
        transform: translateX(15px);
    }

    .hamburger.is-active span:nth-child(3) {
        transform: translate(0px, -9px) rotate(-45deg);
    }

    .hamburger.is-active:hover span {
        background-color: transparent;
        border: solid var(--color-bg);
    }
}


/* --- iphone --- */
@media (max-width: 690px) {

    /* 
    this is an unexpected issue
    1) probably is because the layout I have for header 
    2) once the size of header is changed, when the mobile navbar is toggle out 
    3) the whole page will be push down a little bit, which is annoying 
    4) I not sure, so do not change the size of icon img right now
    */ 
    .headerL img {
        width: 35px;
    }

    .mobile-nav {
        padding: 10rem 0 0;
    }

    .mobile-nav a {
        font-size: 0.8rem;
    }
}


</style>


<script>
/* 
Find tags/class: 
1) querySelector() is a method for finding class such as .hamburger div 
2) document.querySelector('.mobile-nav') means look through all the html code and find where class="mobile-nav"
3) addEventListener() is a method for capture user operation on the html object 
4) hamburger.addEventListener("click" () => {}): for event in .hamburger class,
    - if a click is found then do what the arrow function tells
    - in the arrow function you write what you write to the normal function
    - since we set data-visible as a string value in the html, so we can put it into a variable 
    - later we just need to check what value is the in that variable
5) setAttribute() function is just for setting up the value
6) is-active is a built-in method that check if a some tags are having events happening on them
    - we have a variable capture the hamburger tag, so checking its span children(classList) what values they are taking when active 
    - in our css section we set span to have some animated behaviors, 
    - and .toggle('is-active') method keep it active, so animation continues to hold until inactive
*/
    const mobile_menu = document.querySelector('.mobile-nav');
    const hamburger = document.querySelector('.hamburger');

    hamburger.addEventListener("click", () => {
        /* is-active toggle */
        hamburger.classList.toggle('is-active');
        /* variables for holding the value for data-visible */
        const visibility = mobile_menu.getAttribute("data-visible");
        /* if statement to check */
        if (visibility === "false") {
            mobile_menu.setAttribute('data-visible', true);
        }
        else if (visibility === "true") {
            mobile_menu.setAttribute('data-visible', false);
        }
    });

</script>
