---
// import logo images in a variable logo, and in the <img> tags, we use src={logo}
// this is called dynamic rendering, because we are rendering in runtime, I guess
import logo from '../assets/images/ladybug3.svg';
---
<div class="header">
    <div class="headerL">
        <div class="logo">
            <a href="/">
                <img src={logo} width=45 alt="" />
            </a>
        </div>
    </div>
    <div class="headerC">
        <div id="menu" data-visible="false" class="menu">
            <div><a href="/" class="active">HOME</a></div>
            <div><a href="/research">RESEARCH</a></div>
            <div><a href="/blog">BLOG</a></div>
        </div>
        <button aria-controls="menu" aria-expanded="false" class="hamburger sr-only">
            <span></span>
            <span></span> 
            <span></span> 
        </button>
    </div>
    <div class="headerR">
       <!-- <div class="mobile-nav"> -->
        <!--     <div> -->
        <!--         <a href="/">HOME</a> -->
        <!--         <a href="/research">RESEARCH</a> -->
        <!--         <a href="/blog">BLOG</a>  -->
        <!--     </div> -->
        <!-- </div> -->
    </div>
</div>




   
<style>
/* Header */
/* ------- grid display -------- */
.headerL {
    grid-area: headerL;
}

.headerL img:hover {
    /* width: 2.7rem; */
}

.logo {
    display: flex;
    justify-content: center;
}

.logo img {
    transition: 0.4s;
}

.logo img:hover {
    transform: translate(0px, -2px) rotate(45deg);
}

/* hide the toggle button for resolution greater than 1024px */
/* 
z-index means the how much you are far away from the first layer of the web page, you can also say the height from surface
since when you are adding new elements to the web page, you always adding on the top 
when something A is on top of B in terms of layer, A covers B, you will not be able to click B in that case 
but we want to always be able to click on the menu, so we set it to the very top, which is z-index = 99
and later when we setup the toggle menu for hamburger button. We just want the toggle is at the top layer 
not the whole header section, because that will block the content toggle content when we click on it
*/
.hamburger {
    display: none;
    z-index: 99;
}

.headerR {
    grid-area: headerR;
}

.headerR a {
}



.headerC a {
    color: var(--color-white);
    font-size: 1.2rem;
    margin: 0 0 0 2rem;
    font-family: "slkscr";
}

.headerC a:hover {
    color: var(--color-green);
}



.headerC {
    grid-area: headerC;
    display: flex;
    align-items: center;
    justify-content: right;
}

.menu {
    display: flex;
}




/* --- ipad pro: setting toggle menu starting from the resolution of ipad pro 1024px --- */
@media (max-width: 1024px) {

    /* 
    not all the browser support blurring effect, such as firefox
    by adding an if statement in css could go around with the issue 
    if the browser supports backdrop-filter: blur(1rem), then run the code inside; 
    otherwise fall back to original setting
    */ 
    @supports (backdrop-filter: blur(1rem)) {
        .menu {
            background: hsl(0 0% 100% / 0.1);
            backdrop-filter: blur(1rem);
         }
    }

    .menu {
        /* display: none; */
        left: 100%;
        position: fixed;
        background: hsl(0 0% 10% / 0.5);
        /* inset: 0 0 0 30%; */
        z-index: 98;
        /* 
        css animation slide the block on its x-axis: 
        positive value meaning to the right, negative to the left
        transition makes the animation smooth
        */
        transform: translateX(100%);
        transition: transform 350ms ease-out;

        /* positioning */
        flex-direction: column;
    }


    .menu[data-visible="true"] {
        left: 0;
        right: 0;
        transform: translateX(0%);
        padding: 20rem;
    }


    .mobile-nav {
        position: fixed;
        background: hsl(0 0% 10% / 0.5);
        inset: 0 0 0 30%;
        z-index: 98;
    }


    .hamburger {
        display: block;
        position: relative;
        user-select: none;

        appearance: none;
        border: none;
        outline: none;
        background: none;
        cursor: pointer;
    }

    .hamburger span {
        display: block;
        width: 33px;
        height: 4px;
        margin-bottom: 5px;
        position: relative;

        background-color: var(--color-white);
        border-radius: 6px;
        transform-origin: 0 0;
        transition: 0.4s;
    }

     /* 
     .hamburger:hover span:nth-child(2) {
         transform: translateX(10px); 
         background-color: var(--color-red); 
     } 
     */

     /* 
     we have three children <span /> inside the hamburger div, the command:nth-child(x) means select a specified child 
     also the reason for comment out above css code is because when click the button using ipad or iphone and close 
     and even you move your finger away, the screen will still think you are touching it 
     so still displaying the hover effect, that's why I comment it out for now
     */
    .hamburger span:nth-child(1) {
        transform: translate(0px, -2px) rotate(45deg);
    }

    .hamburger span:nth-child(2) {
        opacity: 0;
        transform: translateX(15px);
    }
    
    .hamburger span:nth-child(3) {
        transform: translate(-3px, 3px) rotate(-45deg);
    }

    .hamburger:hover span {
        /* background-color: var(--color-blue); */
        background-color: transparent;
        border: solid var(--color-bg);
    }
}







.header {
    background: var(--color-bg);
    padding: 1.5rem 0;
    /* border-top: solid; */
    border-top-right-radius: 2rem;
    border-top-left-radius: 2rem;
    display: grid;
    grid-template-columns: 15% 70% 15%;
    grid-template-rows: auto;
    grid-template-areas: 
        "headerL headerC headerR"
}

/* --- large monitor such as 24 inches --- */
@media (max-width: 1700px) {
    .header {
        grid-template-columns: 12% 76% 12%;
    }
}



/* --- iphone --- */
@media (max-width: 640px) {
    .headerC a {
        font-size: 1rem;
    }

    .logo img {
        width: 35px;
    }
}

</style>


<!-- --- script --- -->
<script>
/*
using querySelector find the .hamburger div, and listen to the click event
when event is triggered, this pointer is the .hamburger div that is selected, and find the is-active child inside 
and toggle it, but "this" pointer only works if there is only one tag inside.
if several tags need to be actived at the same time, use their variable name for calling the methods 
also: 'is-active' seems like a built default method to me, because I don't actually know where I called it

btw, "data-visible" is a custom attribute that just like class or id, and it primarily used for visibility
*/
    const menu = document.querySelector('.menu');
    const hamburger = document.querySelector('.hamburger');

    /* const hidden_navbar = document.querySelector(''); */
    hamburger.addEventListener("click", () => {
        const visibility = menu.getAttribute("data-visible");
    
        if (visibility === "false" ) {
            menu.setAttribute('data-visible', true);
            hamburger.setAttribute('aria-expand', true);
            
        }
        else if (visibility === "true" ) {
            menu.setAttribute('data-visible', false);
            hamburger.setAttribute('aria-expand', false);
        }
    });


</script>
